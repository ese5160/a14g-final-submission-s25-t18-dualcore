[
    {
        "id": "1b6239408e27b172",
        "type": "tab",
        "label": "Final Project: Intelligent Window Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39c020bdc54c3ea4",
        "type": "mqtt in",
        "z": "1b6239408e27b172",
        "name": "Temp & Humid (MQTT IN)",
        "topic": "TEMPERATURE",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d06aedaea7810293",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "c4345002c0cd1eed"
            ]
        ]
    },
    {
        "id": "505e7f7cd8aa5d61",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "f4672fcf750bc469",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Indoor Temperature",
        "label": "Temperature:",
        "format": "{{msg.payload.temp}} °C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 180,
        "wires": []
    },
    {
        "id": "da782dbd360ef306",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "f4672fcf750bc469",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Indoor Humidity",
        "label": "Humidity:",
        "format": "{{msg.payload.humid}} %",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "c4345002c0cd1eed",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract Temp/Humid/Voc",
        "func": "msg.payload = {\n    temp: msg.payload.d.temp / 10,\n    humid: msg.payload.d.humid / 10,\n    voc: msg.payload.d.voc\n};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "505e7f7cd8aa5d61",
                "da782dbd360ef306",
                "f4b1ad74b063d7b7",
                "137ed8ad67d7c9b3"
            ]
        ]
    },
    {
        "id": "b84c1f9d0f705c9f",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Servo Direction (MQTT OUT)",
        "topic": "SERVO",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "0441d5d40143ee30",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Servo Status (MQTT OUT)",
        "topic": "SERVO",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 480,
        "y": 620,
        "wires": []
    },
    {
        "id": "f4b1ad74b063d7b7",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Air Quality Hint",
        "func": "var voc = msg.payload.voc;\n\nif (voc >= 100) {\n    msg.payload = \"⚠️ Indoor Pollution Detected!\";\n} else {\n    msg.payload = \"✅ Indoor air is OK.\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "24abbc8206c9bd7d"
            ]
        ]
    },
    {
        "id": "24abbc8206c9bd7d",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "e377b15f4933e4d9",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Window Control Suggestion",
        "label": "Suggestion:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 740,
        "y": 320,
        "wires": []
    },
    {
        "id": "137ed8ad67d7c9b3",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract Air Quality",
        "func": "msg.payload = msg.payload.voc;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "59aba2aa645a02b9"
            ]
        ]
    },
    {
        "id": "59aba2aa645a02b9",
        "type": "ui_gauge",
        "z": "1b6239408e27b172",
        "name": "Indoor AirQuality",
        "group": "f4672fcf750bc469",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Indoor Air Quality:",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "99",
        "seg2": "149",
        "diff": false,
        "className": "",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "7306a4d7ce7b5b02",
        "type": "inject",
        "z": "1b6239408e27b172",
        "name": "Current-Time Injector (1s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "7e614dfb5f42b796"
            ]
        ]
    },
    {
        "id": "7e614dfb5f42b796",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract Current Time",
        "func": "var now = new Date();\nvar options = { \n    timeZone: 'America/New_York', \n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit', \n    minute: '2-digit', \n    second: '2-digit',\n    hour12: true \n};\nmsg.payload = new Intl.DateTimeFormat('en-US', options).format(now);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 40,
        "wires": [
            [
                "30f9c07555a758cd"
            ]
        ]
    },
    {
        "id": "30f9c07555a758cd",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "ba691281df7d0601",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Current Time",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 750,
        "y": 40,
        "wires": []
    },
    {
        "id": "efcaa876d9caacb5",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Window Control Status",
        "func": "// Convert payload to number to avoid type mismatch\nvar payload = Number(msg.payload);\n\n// Retrieve last saved action, default to \"Idle\"\nvar action = flow.get('last_action') || \"Idle\";\nvar progress = \"\";\n\n// Determine action and progress based on payload\nif (payload === 1) {\n    action = \"Closing\";\n    progress = \"Ongoing\";\n    flow.set('last_action', action);  // Save last action\n} else if (payload === 0) {\n    action = \"Opening\";\n    progress = \"Ongoing\";\n    flow.set('last_action', action);  // Save last action\n} else if (payload === 3) {\n    progress = \"Stopped\";\n} else if (payload === 4) {\n    progress = \"Ongoing\";\n}\n\n// Final message construction\nif (action === \"Idle\" && progress !== \"Ongoing\" && progress !== \"Stopped\") {\n    msg.payload = \"Idle\";  // Show only \"Idle\"\n} else {\n    msg.payload = action + \" - \" + progress;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "5db618eb834a39bd"
            ]
        ]
    },
    {
        "id": "5db618eb834a39bd",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "e377b15f4933e4d9",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Window Control Status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 460,
        "y": 520,
        "wires": []
    },
    {
        "id": "9bb2b7473f65e3b7",
        "type": "ui_button",
        "z": "1b6239408e27b172",
        "name": "OPEN WINDOW",
        "group": "e377b15f4933e4d9",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "OPEN WINDOW",
        "tooltip": "",
        "color": "",
        "bgcolor": "rgb(100, 50, 100)",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "b84c1f9d0f705c9f",
                "efcaa876d9caacb5"
            ]
        ]
    },
    {
        "id": "8076ccc3bbcd4f16",
        "type": "ui_button",
        "z": "1b6239408e27b172",
        "name": "CLOSE WINDOW",
        "group": "e377b15f4933e4d9",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "CLOSE WINDOW",
        "tooltip": "",
        "color": "",
        "bgcolor": "orange",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "b84c1f9d0f705c9f",
                "efcaa876d9caacb5"
            ]
        ]
    },
    {
        "id": "42d237d5a2c7d8d7",
        "type": "ui_button",
        "z": "1b6239408e27b172",
        "name": "",
        "group": "e377b15f4933e4d9",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "STOP CONTROL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "3",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "0441d5d40143ee30",
                "efcaa876d9caacb5"
            ]
        ]
    },
    {
        "id": "034f948c15100d0f",
        "type": "ui_button",
        "z": "1b6239408e27b172",
        "name": "",
        "group": "e377b15f4933e4d9",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "RESUME CONTROL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "4",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "0441d5d40143ee30",
                "efcaa876d9caacb5"
            ]
        ]
    },
    {
        "id": "bac45a1eb90bd4cd",
        "type": "inject",
        "z": "1b6239408e27b172",
        "name": "WeatherAPI Injector",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 920,
        "wires": [
            [
                "cbc414be7d47db7a",
                "86988cf83112fb64"
            ]
        ]
    },
    {
        "id": "cbc414be7d47db7a",
        "type": "http request",
        "z": "1b6239408e27b172",
        "name": "TH HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/weather?q=Philadelphia,us&appid=f7386325599e9f80929b6f801bd8b315&units=metric",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 820,
        "wires": [
            [
                "15579e544eec0159"
            ]
        ]
    },
    {
        "id": "15579e544eec0159",
        "type": "json",
        "z": "1b6239408e27b172",
        "name": "TH JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 420,
        "y": 820,
        "wires": [
            [
                "7b16838efed2647c",
                "2e05ef38c16ddb6d"
            ]
        ]
    },
    {
        "id": "7b16838efed2647c",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "TH & Weather",
        "func": "// Correctly access temp and humidity from OpenWeatherMap response\nmsg.payload = {\n    temp: msg.payload.main.temp,\n    humid: msg.payload.main.humidity,\n    weather: msg.payload.weather[0].description // e.g., \"clear sky\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 820,
        "wires": [
            [
                "4837c4ccd5ef524e",
                "9c1547fef0967811",
                "32b2d5193148090b",
                "dbd0e9d832d2b644",
                "0ac71d300629879b",
                "7091c47dd3946c2c",
                "09feb307c6e7b4a3"
            ]
        ]
    },
    {
        "id": "9c1547fef0967811",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "d24d292eba9ba41e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Outdoor Temperature",
        "label": "Temperature:",
        "format": "{{msg.payload.temp}}°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 780,
        "wires": []
    },
    {
        "id": "32b2d5193148090b",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "d24d292eba9ba41e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Outdoor Humidity",
        "label": "Humidity:",
        "format": "{{msg.payload.humid}}%",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 840,
        "wires": []
    },
    {
        "id": "4837c4ccd5ef524e",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 900,
        "wires": []
    },
    {
        "id": "2e05ef38c16ddb6d",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 920,
        "wires": []
    },
    {
        "id": "86988cf83112fb64",
        "type": "http request",
        "z": "1b6239408e27b172",
        "name": "VOC HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.openweathermap.org/data/2.5/air_pollution?lat=39.9526&lon=-75.1652&appid=f7386325599e9f80929b6f801bd8b315",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "24ac6bf78525d3ec"
            ]
        ]
    },
    {
        "id": "24ac6bf78525d3ec",
        "type": "json",
        "z": "1b6239408e27b172",
        "name": "VOC JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 411.1999816894531,
        "y": 1040.4000244140625,
        "wires": [
            [
                "9eeb67df0bf65103"
            ]
        ]
    },
    {
        "id": "9eeb67df0bf65103",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract API O3",
        "func": "// Extract O3 (Ozone) from OpenWeatherMap Air Pollution API response\nmsg.payload = msg.payload.list[0].components.o3;\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1040,
        "wires": [
            [
                "68c892a251ddec9b",
                "4278d1720e97395b",
                "ddaad1e98ef627a0"
            ]
        ]
    },
    {
        "id": "4278d1720e97395b",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "d24d292eba9ba41e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Outdoor AirQuality",
        "label": "Air Quality:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 1040,
        "wires": []
    },
    {
        "id": "68c892a251ddec9b",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0c8c9250cbb29e96",
        "type": "ui_text",
        "z": "1b6239408e27b172",
        "group": "d24d292eba9ba41e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Outdoor Weather",
        "label": "Weather:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1290,
        "y": 900,
        "wires": []
    },
    {
        "id": "76622cd358544667",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 960,
        "wires": []
    },
    {
        "id": "dbd0e9d832d2b644",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Simplified Weather",
        "func": "var condition = String(msg.payload).toLowerCase();  // Ensure lowercase for matching\nvar simplified = \"\";\n\nif (condition.includes(\"clear\")) {\n    simplified = \"S\";\n} else if (condition.includes(\"clouds\") ||\n           condition.includes(\"scattered clouds\") ||\n           condition.includes(\"few clouds\") ||\n           condition.includes(\"mist\") || \n           condition.includes(\"smoke\") || \n           condition.includes(\"haze\") || \n           condition.includes(\"fog\")) {\n    simplified = \"C\";\n} else if (condition.includes(\"rain\") || \n           condition.includes(\"drizzle\") || \n           condition.includes(\"thunderstorm\")) {\n    simplified = \"R\";\n} else if (condition.includes(\"overcast\")) {\n    simplified = \"O\";\n} else {\n    simplified = \"O\"; // Treat unknown weather as Overcast (default fallback)\n}\n\nmsg.payload = simplified;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 900,
        "wires": [
            [
                "76622cd358544667",
                "4efdb32f4f36a913",
                "7e2646acb55be5a4"
            ]
        ]
    },
    {
        "id": "4efdb32f4f36a913",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Philly Weather (MQTT Out)",
        "topic": "WEATHER",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 1160,
        "y": 960,
        "wires": []
    },
    {
        "id": "f4656a35a39fc63e",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Temp Out",
        "topic": "PhillyTemp",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 1080,
        "y": 760,
        "wires": []
    },
    {
        "id": "053bcf7ac3ce2ac1",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Humid Out",
        "topic": "PhillyHumid",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 1290,
        "y": 840,
        "wires": []
    },
    {
        "id": "0ac71d300629879b",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract API Temp",
        "func": "msg.topic = \"PhillyTemp\";\nmsg.payload = msg.payload.temp;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 720,
        "wires": [
            [
                "f4656a35a39fc63e",
                "57910c74a5b1d61e"
            ]
        ]
    },
    {
        "id": "57910c74a5b1d61e",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 700,
        "wires": []
    },
    {
        "id": "5d36891364363a0b",
        "type": "ui_text_input",
        "z": "1b6239408e27b172",
        "name": "On Time",
        "label": "On Time:",
        "tooltip": "",
        "group": "8b16df2e72f322d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "2000",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 680,
        "y": 400,
        "wires": [
            [
                "473982120f1b5c8b",
                "82e67db9a7f3f133"
            ]
        ]
    },
    {
        "id": "b3787664be58ec1f",
        "type": "ui_text_input",
        "z": "1b6239408e27b172",
        "name": "Off Time",
        "label": "Off Time:",
        "tooltip": "",
        "group": "8b16df2e72f322d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "2000",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 700,
        "y": 520,
        "wires": [
            [
                "473982120f1b5c8b",
                "1321deba2adcbcc3"
            ]
        ]
    },
    {
        "id": "473982120f1b5c8b",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Within Period?",
        "func": "function toMinutes(t) {\n    var [hour, minutePart] = t.trim().split(\":\");\n    var minute = parseInt(minutePart, 10);\n    var ampm = t.toUpperCase().includes(\"PM\") ? 12 : 0;\n    return (parseInt(hour, 10) % 12 + ampm) * 60 + minute;\n}\n\nvar now = new Date();\nvar options = { \n    timeZone: 'America/New_York', \n    hour: '2-digit', \n    minute: '2-digit',\n    hour12: true\n};\nvar currentTime = new Intl.DateTimeFormat('en-US', options).format(now);\n\nvar startTime = flow.get('startTime') || \"08:00 AM\";\nvar endTime = flow.get('endTime') || \"07:00 PM\";\n\nvar nowMinutes = toMinutes(currentTime);\nvar startMinutes = toMinutes(startTime);\nvar endMinutes = toMinutes(endTime);\n\nvar isPDLCOn = (startMinutes < endMinutes)\n    ? (nowMinutes >= startMinutes && nowMinutes <= endMinutes)\n    : (nowMinutes >= startMinutes || nowMinutes <= endMinutes);\n\nvar commandMsg = {};\nvar statusMsg = {};\n\nif (isPDLCOn) {\n    commandMsg.payload = \"pdlc_on\";\n    statusMsg.payload = \"PDLC Transparent (ON)\";\n} else {\n    commandMsg.payload = \"pdlc_off\";\n    statusMsg.payload = \"PDLC Opaque (OFF)\";\n}\n\nreturn [commandMsg, statusMsg];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 520,
        "wires": [
            [
                "820f18ffe2ae2294",
                "82f32aa8a072ea91"
            ]
        ]
    },
    {
        "id": "820f18ffe2ae2294",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Window Command",
        "topic": "PDLC",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "82f32aa8a072ea91",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 480,
        "wires": []
    },
    {
        "id": "c500a84e76fd0851",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Publish Current Time",
        "func": "var now = new Date();\nvar options = { \n    timeZone: 'America/New_York', \n    hour: '2-digit', \n    minute: '2-digit',\n    hour12: false // <<--- 24-hour format, no AM/PM\n};\n\n// Format the current time\nvar formatter = new Intl.DateTimeFormat('en-US', options);\nvar parts = formatter.formatToParts(now);\n\n// Extract hour and minute separately\nvar hour = \"\";\nvar minute = \"\";\n\nparts.forEach(function (part) {\n    if (part.type === \"hour\") {\n        hour = part.value;\n    } else if (part.type === \"minute\") {\n        minute = part.value;\n    }\n});\n\n// Build the payload\nmsg.payload = {\n    hour: parseInt(hour, 10),\n    minute: parseInt(minute, 10)\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "d9a968f27888a512",
                "693dbb7d721e90f5"
            ]
        ]
    },
    {
        "id": "8e49c40892bbd2b8",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Current Hour (MQTT OUT)",
        "topic": "HOUR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 960,
        "y": 80,
        "wires": []
    },
    {
        "id": "4001b3f0d971f763",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Current Minute (MQTT OUT)",
        "topic": "MINUTE",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 1080,
        "y": 120,
        "wires": []
    },
    {
        "id": "d9a968f27888a512",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "HOUR",
        "func": "msg.topic = \"HOUR\";\nmsg.payload = msg.payload.hour;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 80,
        "wires": [
            [
                "8e49c40892bbd2b8",
                "6df78786842a7d6c"
            ]
        ]
    },
    {
        "id": "693dbb7d721e90f5",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "MINUTE",
        "func": "msg.topic = \"MINUTE\";\nmsg.payload = msg.payload.minute;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "4001b3f0d971f763",
                "567b41690c373c8a"
            ]
        ]
    },
    {
        "id": "6df78786842a7d6c",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 40,
        "wires": []
    },
    {
        "id": "567b41690c373c8a",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "7091c47dd3946c2c",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Extract API Humid",
        "func": "msg.topic = \"PhillyHumid\";\nmsg.payload = msg.payload.humid\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "053bcf7ac3ce2ac1",
                "887a1d0772edb621"
            ]
        ]
    },
    {
        "id": "887a1d0772edb621",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 780,
        "wires": []
    },
    {
        "id": "09feb307c6e7b4a3",
        "type": "debug",
        "z": "1b6239408e27b172",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 740,
        "wires": []
    },
    {
        "id": "ddaad1e98ef627a0",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Philly AirQuality (MQTT OUT)",
        "topic": "OZONE",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 940,
        "y": 1100,
        "wires": []
    },
    {
        "id": "9384e37dbbdc43c6",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "On Time (Hour)",
        "topic": "OnHOUR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "81112cca8851f044",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "On Time (Minute)",
        "topic": "OnMINUTE",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 950,
        "y": 440,
        "wires": []
    },
    {
        "id": "82e67db9a7f3f133",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "On Time",
        "func": "// Assume msg.payload = \"08:30\"\nvar timeParts = msg.payload.split(\":\"); // [\"08\", \"30\"]\nvar hour = parseInt(timeParts[0]);\nvar minute = parseInt(timeParts[1]);\n\nreturn [\n    { topic: \"PDLC_OnHOUR\", payload: hour },\n    { topic: \"PDLC_OnMINUTE\", payload: minute }\n];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 460,
        "wires": [
            [
                "9384e37dbbdc43c6"
            ],
            [
                "81112cca8851f044"
            ]
        ]
    },
    {
        "id": "1321deba2adcbcc3",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Off Time",
        "func": "// Assume msg.payload = \"08:30\"\nvar timeParts = msg.payload.split(\":\"); // [\"08\", \"30\"]\nvar hour = parseInt(timeParts[0]);\nvar minute = parseInt(timeParts[1]);\n\n// For Off-Time\nreturn [\n    { topic: \"PDLC_OffHOUR\", payload: hour },\n    { topic: \"PDLC_OffMINUTE\", payload: minute }\n];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 600,
        "wires": [
            [
                "510a4be362a21384"
            ],
            [
                "509c131462a88024"
            ]
        ]
    },
    {
        "id": "510a4be362a21384",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Off Time (Hour)",
        "topic": "OffHOUR",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 960,
        "y": 580,
        "wires": []
    },
    {
        "id": "509c131462a88024",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "Off Time (Minute)",
        "topic": "OffMINUTE",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 950,
        "y": 640,
        "wires": []
    },
    {
        "id": "417f8e1b77c219e7",
        "type": "inject",
        "z": "1b6239408e27b172",
        "name": "Current-Time Injector (1 min)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "c500a84e76fd0851"
            ]
        ]
    },
    {
        "id": "7e2646acb55be5a4",
        "type": "function",
        "z": "1b6239408e27b172",
        "name": "Match Weather",
        "func": "var code = String(msg.payload).toUpperCase();\nvar fullName = \"\";\n\nswitch (code) {\n    case \"S\":\n        fullName = \"Sunny\";\n        break;\n    case \"C\":\n        fullName = \"Cloudy\";\n        break;\n    case \"R\":\n        fullName = \"Rainy\";\n        break;\n    case \"O\":\n    default:\n        fullName = \"Overcast\";\n        break;\n}\n\nmsg.payload = fullName;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 900,
        "wires": [
            [
                "0c8c9250cbb29e96"
            ]
        ]
    },
    {
        "id": "0a5b9284bab0984e",
        "type": "ui_button",
        "z": "1b6239408e27b172",
        "name": "OTAU",
        "group": "d58fa2aae8378f11",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "OTAU",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "a15716f495456522"
            ]
        ]
    },
    {
        "id": "a15716f495456522",
        "type": "mqtt out",
        "z": "1b6239408e27b172",
        "name": "OTAU (OUT)",
        "topic": "OTAU",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d06aedaea7810293",
        "x": 290,
        "y": 720,
        "wires": []
    },
    {
        "id": "d06aedaea7810293",
        "type": "mqtt-broker",
        "name": "",
        "broker": "172.190.44.195",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f4672fcf750bc469",
        "type": "ui_group",
        "name": "Indoor Temperature & Humidity & VOC",
        "tab": "b05e1bbc6b8b18bb",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e377b15f4933e4d9",
        "type": "ui_group",
        "name": "Window Control",
        "tab": "b05e1bbc6b8b18bb",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba691281df7d0601",
        "type": "ui_group",
        "name": "Current Time",
        "tab": "b05e1bbc6b8b18bb",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d24d292eba9ba41e",
        "type": "ui_group",
        "name": "Philadelphia Current Weather",
        "tab": "b05e1bbc6b8b18bb",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b16df2e72f322d8",
        "type": "ui_group",
        "name": "Set Window On/Off",
        "tab": "b05e1bbc6b8b18bb",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d58fa2aae8378f11",
        "type": "ui_group",
        "name": "OTAU",
        "tab": "b05e1bbc6b8b18bb",
        "order": 6,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b05e1bbc6b8b18bb",
        "type": "ui_tab",
        "name": "Final Project: Intelligent Window Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]